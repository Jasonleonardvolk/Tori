name: Rust Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'alan_core/**'
      - 'ci/rust-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'alan_core/**'
      - 'ci/rust-tests.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build_and_test:
    name: Build and Test (${{ matrix.os }} - ${{ matrix.toolchain }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain: [stable, nightly]
        include:
          - os: ubuntu-latest
            toolchain: stable
            target: wasm32-unknown-unknown
            run_wasm: true

    steps:
    - uses: actions/checkout@v3

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.toolchain }}
        override: true
        components: rustfmt, clippy

    - name: Add WASM target (where applicable)
      if: matrix.run_wasm
      run: rustup target add wasm32-unknown-unknown

    - name: Cargo cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.toolchain }}-

    - name: Check formatting
      working-directory: alan_core
      run: cargo fmt --all -- --check

    - name: Check with clippy
      working-directory: alan_core
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      working-directory: alan_core
      run: cargo build --all-features --verbose

    - name: Run tests
      working-directory: alan_core
      run: cargo test --all-features --verbose

    - name: Build release
      working-directory: alan_core
      run: cargo build --release --all-features

    - name: Run benchmarks
      working-directory: alan_core
      run: cargo bench -- --test

    - name: Build WASM (where applicable)
      if: matrix.run_wasm
      working-directory: alan_core
      run: cargo build --target wasm32-unknown-unknown

  code_coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
    - uses: actions/checkout@v3

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: llvm-tools-preview

    - name: Install grcov
      run: |
        cargo install grcov
        rustup component add llvm-tools-preview

    - name: Run tests with coverage
      env:
        RUSTFLAGS: "-Zinstrument-coverage -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off"
        RUSTDOCFLAGS: "-Zinstrument-coverage -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off"
        LLVM_PROFILE_FILE: "alan_core-%p-%m.profraw"
      working-directory: alan_core
      run: cargo test --all-features

    - name: Generate coverage report
      working-directory: alan_core
      run: grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./alan_core/lcov.info
        name: codecov-umbrella
        fail_ci_if_error: false
