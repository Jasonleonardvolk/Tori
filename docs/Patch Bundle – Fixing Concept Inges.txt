Patch Bundle – Fixing Concept Ingestion Path (TORI System)
Below are the patches for each affected file, with before-and-after code snippets and explanations of the changes made.
File: src/lib/stores/conceptMesh.ts
Before (Store Initialization Section)
ts
Copy
55: };
56: 
57: export const conceptMesh = writable<ConceptDiff[]>(initialDiffs);
58: export const systemState = writable<SystemState>(initialSystemState);
59: export const conceptNodes = writable<Record<string, ConceptNode>>({});
60: 
61: // Derived stores for UI consumption
62: export const systemCoherence = writable<number>(0.8);
After (Store Initialization Section)
ts
Copy
55: };
56: 
57: export const conceptMesh = writable<ConceptDiff[]>(initialDiffs);
58: export const systemState = writable<SystemState>(initialSystemState);
59: export const conceptNodes = writable<Record<string, ConceptNode>>({});
60: 
+61: // Load any saved concept diffs from previous sessions (persistent storage)
+62: if (typeof window !== 'undefined') {
+63:   loadConceptMeshFromMemory();
+64: }
65: 
66: // Derived stores for UI consumption
67: export const systemCoherence = writable<number>(0.8);
Explanation: These lines ensure that any previously saved concept diffs (from localStorage) are loaded when the app initializes. This makes the conceptMesh store persistent across sessions rather than volatile. The check for window guards against running in non-browser contexts.
Before (Adding ConceptDiff Logging)
ts
Copy
144:   };
145:   
146:   // SIMPLIFIED - cognitive engine temporarily disabled
147:   console.log('📊 ConceptDiff added (cognitive processing temporarily disabled):', newDiff);
148:   
149:   // Calculate contradiction delta based on concept complexity
150:   const contradictionDelta = calculateContradictionDelta(newDiff);
After (Adding ConceptDiff Logging)
ts
Copy
144:   };
145:   
146:   // SIMPLIFIED - cognitive engine temporarily disabled
-147:   console.log('📊 ConceptDiff added (cognitive processing temporarily disabled):', newDiff);
+147:   console.log('📊 ConceptDiff added to mesh [' + newDiff.concepts.length + ' concepts] for "' + newDiff.title + '"', newDiff); // Updated log to reflect integration
148:   
149:   // Calculate contradiction delta based on concept complexity
150:   const contradictionDelta = calculateContradictionDelta(newDiff);
Explanation: The console log message for adding a ConceptDiff has been updated to reflect actual cognitive integration. It now includes the number of concepts and the document title, instead of the outdated “cognitive processing temporarily disabled” note. This provides clearer feedback in the console that the concepts have been integrated and persisted (since addConceptDiff also saves to memory via saveConceptMeshToMemory).
File: src/lib/cognitive/cognitiveEngine.ts
Before (Import Section)
ts
Copy
1: import { cognitiveState, updateCognitiveState, CognitiveThresholds } from './cognitiveState';
2: import { contradictionMonitor } from './contradictionMonitor';
3: import { phaseController } from './phaseController';
4: // import type { LoopRecord } from './loopRecord'; // TEMPORARILY DISABLED - CACHE ISSUES
5: import { closureGuard } from './closureGuard';
6: import type { ClosureResult, FeedbackOptions } from './closureGuard';
...
13: import { get } from 'svelte/store';
After (Import Section)
ts
Copy
1: import { cognitiveState, updateCognitiveState, CognitiveThresholds } from './cognitiveState';
2: import { contradictionMonitor } from './contradictionMonitor';
3: import { phaseController } from './phaseController';
4: import { closureGuard } from './closureGuard';
5: import type { ClosureResult, FeedbackOptions } from './closureGuard';
+6: import { addConceptDiff } from '$lib/stores/conceptMesh';  // New: import concept diff persistence function
7: import { get } from 'svelte/store';
Explanation: We import the addConceptDiff function from the conceptMesh store. This allows the cognitive engine to record parsed concepts into the persistent concept mesh. By bringing in this function, the cognitive loop processing can now directly write concept diffs to memory.
Before (tori:upload Event Listener)
ts
Copy
35:   private setupEventListeners(): void {
36:     if (typeof window === 'undefined') return;
37:     
38:     // Listen for upload events to trigger automatic processing
39:     window.addEventListener('tori:upload', async (event: any) => {
40:       const { filename, text, concepts } = event.detail;
41:       console.log(`📚 Auto-processing upload: ${filename}`);
42:       
43:       // Generate symbolic glyph path from upload
44:       const glyphPath = this.generateGlyphPathFromUpload(text, concepts);
45:       
46:       // Process as symbolic loop
47:       await this.processSymbolicLoop(
48:         `Document upload: ${filename}`,
49:         glyphPath,
50:         {
51:           scriptId: 'auto_upload_processor',
52:           conceptFootprint: concepts || [],
53:           createdByPersona: 'document_processor'
54:         }
55:       );
56:     });
57:     
58:     // Listen for manual cognitive processing requests ...
After (tori:upload Event Listener)
ts
Copy
38:     // Listen for upload events to trigger automatic processing
39:     window.addEventListener('tori:upload', async (event: any) => {
40:       const { filename, text, concepts, source } = event.detail;
41:       console.log(`📚 Auto-processing upload: ${filename}`);
42:       
43:       // Generate symbolic glyph path from upload
44:       const glyphPath = this.generateGlyphPathFromUpload(text, concepts);
45:       
46:       // Process as symbolic loop and capture the resulting loop record
47:       const loopRecord = await this.processSymbolicLoop(
48:         `Document upload: ${filename}`,
49:         glyphPath,
50:         {
51:           scriptId: 'auto_upload_processor',
52:           conceptFootprint: concepts || [],
53:           createdByPersona: 'document_processor',
54:           documentTitle: filename  // New metadata field for clarity
55:         }
56:       );
57:       // If the Scholar ghost hasn't already added these concepts, persist them
+58:       if (source !== 'scholarGhost') {
+59:         addConceptDiff({
+60:           type: 'document',
+61:           title: filename,
+62:           concepts: concepts,
+63:           summary: `Processed "${filename}" (${concepts.length} concepts)`,
+64:           metadata: {
+65:             processedBy: 'auto_upload_processor',
+66:             loopId: loopRecord.id,
+67:             conceptCount: concepts.length,
+68:             uploadTimestamp: new Date()
+69:           }
+70:         });
+71:       }
+72:       console.log('📑 LoopRecord created for upload:', {
+73:         id: loopRecord.id,
+74:         title: filename,
+75:         concepts: loopRecord.metadata?.conceptFootprint,
+76:         timestamp: loopRecord.timestamp
+77:       });
58:     });
59:     
60:     // Listen for manual cognitive processing requests ...
Explanation: Within the tori:upload event listener, we now capture the LoopRecord returned by processSymbolicLoop. After processing the upload as a symbolic cognitive loop, we add a new concept diff to the mesh only if it wasn’t already added by the Scholar ghost persona. This uses the imported addConceptDiff to persist the document’s concepts, title, and a summary (including concept count) into the concept mesh store. We also log a summary of the created loop record (id, document title, involved concepts, and timestamp) to the console as 📑 LoopRecord, confirming that a cognitive loop was recorded with the document’s metadata. The check on source !== 'scholarGhost' prevents duplicate concept entries in cases where the ghost persona already handled the concept diff.
File: src/lib/elfin/scripts/onUpload.ts
Before (Successful Extraction Branch)
ts
Copy
35:     // 4. Scholar indexes the document into memory vault
36:     const indexResult = await scholar.index();
37:     
38:     if (indexResult && indexResult.concepts && indexResult.concepts.length > 0) {
39:       // 5. Create concept diff for the memory system
40:       addConceptDiff({
41:         type: 'document',
42:         title: file.name,
43:         concepts: indexResult.concepts.map((c: any) => c.name || c),
44:         summary: indexResult.summary || `Processed "${file.name}" via Scholar ghost`,
45:         metadata: { /* ... */ }
46:       });
47: 
48:       // 6. Scholar emits concepts to Thoughtspace
49:       await scholar.emitConcepts(indexResult.concepts);
50:       
51:       // 7. Update system entropy ...
52:       updateSystemEntropy(-5);
53:       
54:       console.log('✅ ELFIN++ onUpload: Scholar successfully processed document', {
55:         file: file.name,
56:         conceptsFound: indexResult.concepts.length,
57:         summary: indexResult.summary
58:       });
59:       
60:     } else {
After (Successful Extraction Branch)
ts
Copy
38:     if (indexResult && indexResult.concepts && indexResult.concepts.length > 0) {
39:       // 5. Create concept diff for the memory system
40:       addConceptDiff({
41:         type: 'document',
42:         title: file.name,
43:         concepts: indexResult.concepts.map((c: any) => c.name || c),
44:         summary: indexResult.summary || `Processed "${file.name}" via Scholar ghost`,
45:         metadata: { /* ... */ }
46:       });
47: 
48:       // 6. Scholar emits concepts to Thoughtspace
49:       await scholar.emitConcepts(indexResult.concepts);
50:       
51:       // 7. Update system entropy ...
52:       updateSystemEntropy(-5);
53:       
54:       console.log('✅ ELFIN++ onUpload: Scholar successfully processed document', {
55:         file: file.name,
56:         conceptsFound: indexResult.concepts.length,
57:         summary: indexResult.summary
58:       });
+59:       // Dispatch cognitive integration event for processed document
+60:       window.dispatchEvent(new CustomEvent('tori:upload', { detail: {
+61:         filename: file.name,
+62:         text: indexResult.summary?.substring(0, 1000) || '',
+63:         concepts: indexResult.concepts,
+64:         timestamp: new Date(),
+65:         source: 'scholarGhost'
+66:       } }));
67:       
68:     } else {
Before (Fallback Branch)
ts
Copy
70:     } else {
71:       console.warn('⚠️ ELFIN++ onUpload: No concepts extracted from document');
72:       
73:       // Fallback: create basic concept diff
74:       addConceptDiff({
75:         type: 'document',
76:         title: file.name,
77:         concepts: ['Document', 'Knowledge'],
78:         summary: `Document "${file.name}" uploaded (minimal processing)`,
79:         metadata: { /* ... */ }
80:       });
81:     }
After (Fallback Branch)
ts
Copy
70:     } else {
71:       console.warn('⚠️ ELFIN++ onUpload: No concepts extracted from document');
72:       
73:       // Fallback: create basic concept diff
74:       addConceptDiff({
75:         type: 'document',
76:         title: file.name,
77:         concepts: ['Document', 'Knowledge'],
78:         summary: `Document "${file.name}" uploaded (minimal processing)`,
79:         metadata: { /* ... */ }
80:       });
+81:       // Dispatch event with fallback concepts for cognitive processing
+82:       window.dispatchEvent(new CustomEvent('tori:upload', { detail: {
+83:         filename: file.name,
+84:         text: `Document "${file.name}" uploaded (minimal processing)`,
+85:         concepts: ['Document', 'Knowledge'],
+86:         timestamp: new Date(),
+87:         source: 'scholarGhost'
+88:       } }));
89:     }
Before (Error Catch Block)
ts
Copy
90:   } catch (error) {
91:     console.error('❌ ELFIN++ onUpload: Scholar processing failed:', error);
92:     
93:     // Create error concept diff
94:     addConceptDiff({
95:       type: 'document',
96:       title: file.name,
97:       concepts: ['Processing Error', 'Failed Upload'],
98:       summary: `Failed to process "${file.name}": ${error.message}`,
99:       metadata: { /* ... */ }
100:     });
101:     
102:     throw error;
103:   }
After (Error Catch Block)
ts
Copy
90:   } catch (error) {
91:     console.error('❌ ELFIN++ onUpload: Scholar processing failed:', error);
92:     
93:     // Create error concept diff
94:     addConceptDiff({
95:       type: 'document',
96:       title: file.name,
97:       concepts: ['Processing Error', 'Failed Upload'],
98:       summary: `Failed to process "${file.name}": ${error.message}`,
99:       metadata: { /* ... */ }
100:     });
+101:     // Dispatch event for error to record failed processing loop
+102:     window.dispatchEvent(new CustomEvent('tori:upload', { detail: {
+103:       filename: file.name,
+104:       text: `Failed to process "${file.name}": ${error.message}`,
+105:       concepts: ['Processing Error', 'Failed Upload'],
+106:       timestamp: new Date(),
+107:       source: 'scholarGhost'
+108:     } }));
109:     
110:     throw error;
111:   }
Explanation: In the onUpload script, after adding a concept diff we now trigger a tori:upload event to engage the cognitive engine. In the success path (when concepts are extracted), we dispatch a custom event with the document’s filename, the summary (or a snippet of content) as text, the list of concepts, and a timestamp, marking the source as 'scholarGhost'. In the fallback path (no concepts extracted), we similarly dispatch an event with a generic summary and the fallback concept list. In the error case, we dispatch an event containing the error information and failure concepts. These events ensure that every document upload (even fallback or error) kicks off the cognitive integration pipeline, creating a loop record with the document’s metadata. The source: 'scholarGhost' flag is included so the cognitive engine knows the Scholar ghost already handled the concept diff (avoiding duplicate persistence). As a result of this dispatch, the cognitive engine will process a symbolic loop for the upload and record a LoopRecord with the document title, concepts (via conceptFootprint), and timestamp.
By applying these patches, the system will now correctly handle concept ingestion from PDF uploads end-to-end:
Concepts parsed from documents are always passed to addConceptDiff and saved persistently (loaded from storage on startup).
The conceptMesh store retains those concepts permanently, surviving page reloads.
A cognitive loop record is created for each upload, including concept metadata, the document’s title, and a timestamp (visible via the console 📑 LoopRecord log).
Console logs now clearly reflect the cognitive integration – from adding the concept diff (with concept count and title) to confirming the loop record creation – providing immediate feedback that the upload has been integrated into the system’s memory and cognitive model.