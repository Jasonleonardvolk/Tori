
Modular Reasoning Engine for Phase-Aware Traversal

Reasoning Engine Scaffold for Multi-Hop Concept Traversal (Prajna)
Overview
This scaffold implements a modular reasoning_engine.py module to support Prajna's multi-hop reasoning capabilities. It provides a self-contained reasoning engine that can traverse a graph of concepts in multiple steps, maintaining coherence throughout the chain. Multi-hop reasoning is treated as finding a logically coherent path through a knowledge graph
arxiv.org
. To ensure the reasoning chain stays on track, the engine evaluates the coherence of each step – avoiding large context shifts (low phase drift) and preferring strong conceptual connections (high resonance between concepts). Such coherence evaluation of intermediate reasoning steps is essential for robust multi-step reasoning
arxiv.org
. Key features of the scaffold include:
ConceptNode and ConceptMeshStub: In-memory representations of concepts and their links, serving as a stubbed concept network for testing.
ReasoningPathFinder class: Implements multi-hop traversal logic, prioritizing minimal phase drift and maximal resonance at each step.
Custom Traversal Strategy: Uses a graph search algorithm (Dijkstra’s algorithm) guided by a combined cost function to find the most coherent path
arxiv.org
.
Output Metrics: Generates a structured result with the concept path, a coherence score indicating overall alignment, and the total phase drift across the chain.
Importantly, this module is designed for unit testing in isolation. It does not depend on any external systems like SolitonMemoryInterface or ConceptMeshAPI. Instead, it uses a stub (stand-in) for the concept mesh, consistent with software testing best practices: scaffolding code not part of the application but written to support unit testing
cs.odu.edu
. In particular, we use a stub to replace the real concept graph interface, allowing us to test the pathfinding logic independently
cs.odu.edu
. When integrating into Prajna’s full system (Phase 2), this stub can be seamlessly swapped out for the real components without changing the pathfinding logic.
Data Structures: ConceptNode and ConceptMeshStub
To simulate Prajna’s conceptual network in a controlled way, we define simple data structures:
ConceptNode: Represents a node in the concept graph. Each node has:
concept_id – a unique identifier (e.g. a string or int) for the concept.
phase – a numeric value indicating the concept’s phase or contextual state.
links – connections to other concepts (neighbors). In the stub, this is a dictionary mapping neighbor IDs to a resonance score (a float representing link strength).
ConceptMeshStub: A lightweight in-memory graph of ConceptNodes used as a stand-in for the real concept mesh. It provides methods to add nodes and links and to query neighbors. This stub acts as a test double for the concept graph service, enabling us to run the reasoning engine without external dependencies
cs.odu.edu
. By using such a stub, we can construct synthetic concept networks with known properties and verify the traversal logic deterministically.
Phase and Resonance: In this context, a node’s phase can be viewed as an abstract coordinate or category indicating its semantic context. “Phase drift” refers to how much this phase value changes as we hop from one concept to the next – essentially measuring semantic shift between steps. In cognitive terms, phase drift is analogous to a change in meaning or context
philarchive.org
; a reasoning path with low phase drift stays within a consistent context or topic. Conversely, resonance denotes how strongly two concepts are related or "in tune" with each other – you can think of it as the conceptual similarity or connection strength of a link. A high resonance link means the concepts strongly align or frequently co-occur, which makes that hop more coherent. The goal is to favor hops that are in-phase (minimal drift) and resonant (strongly related) to maintain a cohesive reasoning chain.
ReasoningPathFinder Traversal Logic
The ReasoningPathFinder class encapsulates the multi-hop traversal algorithm that finds an optimal reasoning chain between concepts. It accepts a concept mesh (the stub or, later, the real graph interface) in its constructor, making it easy to plug in different implementations. The core method find_path(start_id, end_id, max_hops=None) searches for a path from a start concept to an end concept, adhering to the constraints of low phase drift and high resonance at each step. Traversal algorithm: We employ a best-first graph search (Dijkstra’s algorithm variant) that uses a custom cost function to guide the path selection
arxiv.org
. Each potential hop from concept A to concept B incurs a cost defined as:
rust
Copy
Edit
cost(A -> B) = phase_diff(A,B) + (1 - resonance(A,B))
Where:
phase_diff(A,B) = |phase(A) – phase(B)| (absolute difference in phase values).
resonance(A,B) is the link strength between A and B (normalized 0 to 1 in our stub).
This cost formula is lower when the phase difference is small (contexts align) and the resonance is high (concepts are closely related). For example, if two concepts are perfectly in phase and strongly connected (resonance = 1.0), the cost for that hop would be minimal
philarchive.org
. The pathfinder accumulates these costs over a path and always expands the next step along the least-cost path so far. This effectively prioritizes chains of reasoning that drift minimally from the original context and use the most meaningful connections. In practice, this means the search will favor fewer, more coherent hops over erratic jumps, aligning with the idea that a reasoning path should be a logically coherent walk through the knowledge graph
arxiv.org
. Algorithm outline: Starting from the start_id, the algorithm explores outward through the concept network:
Use a priority queue to always pick the next concept with the lowest accumulated cost (most coherent path so far).
Keep track of the best cost found for each concept visited to avoid re-processing higher-cost paths.
If a maximum hop count (max_hops) is specified, limit the depth of traversal to prevent excessively long chains.
Stop when the target end_id is reached (or when all options are exhausted without finding the target).
Reconstruct the path by backtracking from the target to the start using recorded predecessors.
This approach ensures we find the path that minimizes total phase drift and maximizes total resonance by design. Notably, by formulating the search as a cost-minimization, we integrate both factors into a single objective. (In a more advanced implementation, one could also weight these factors differently or incorporate additional heuristics, but the given formula suffices for the scaffold.)
Output: Path and Coherence Metrics
The result of find_path is returned as a dictionary with the following keys:
path: The list of concept IDs representing the reasoning chain from the start concept to the end concept in order. This is the multi-hop route the engine discovered.
coherence_score: A float indicating the overall conceptual alignment of the path. In this scaffold, we compute it as total resonance minus total phase drift for the chain. A higher coherence score means the chain is more conceptually consistent (many strong links and little context shift), whereas a low or negative score would indicate a tenuous, disjointed connection. This quantification of coherence aligns with the need to evaluate how reasonable and logically connected a multi-hop reasoning path is
arxiv.org
. (In a real system, this formula could be refined or replaced by a learned metric, but for testing purposes it provides a clear indicator.)
phase_drift: The total phase deviation accumulated across the entire path (sum of phase differences between each consecutive pair in the chain). This measures how far the reasoning wandered from the starting context. Optionally, one could look at average drift per hop, but the total gives a direct sense of how much the context shifted overall. Keeping this value low has been an explicit goal of the traversal, since minimal semantic drift tends to preserve coherence
philarchive.org
.
By examining these outputs, we can verify that the pathfinder behaves as expected. For instance, we expect that the chosen path has the smallest possible phase_drift among alternatives and a relatively high coherence_score. If a more direct path exists but has a large phase mismatch or weak links, the engine should opt for a slightly longer path that is more coherent. This reflects a trade-off often needed in multi-hop reasoning: sometimes an indirect route yields a more sensible chain of reasoning than a direct jump that breaks context.
Testing and Integration Considerations
This scaffold is deliberately self-contained and decoupled from Prajna’s broader system to facilitate easy testing and future integration. We can construct a synthetic ConceptMeshStub with a set of nodes and links, then run ReasoningPathFinder.find_path on it to validate various scenarios (e.g., short path vs long path, changes in phase values, varying resonance strengths). Because the module doesn’t call any external APIs or require a database, unit tests can run quickly and deterministically, focusing purely on the reasoning logic. This isolation ensures that any issues in multi-hop traversal (like incorrect path scoring or reconstruction) can be caught early, without interference from outside components
cs.odu.edu
. When moving to Phase 2, integrating with Prajna’s live context builder and synthesis pipeline, we can swap in the real implementations with minimal changes. The ReasoningPathFinder is written against a generic interface – it expects the concept mesh object to provide certain methods (get_node, get_neighbors, get_resonance). As long as the real ConceptMeshAPI or SolitonMemoryInterface can expose similar methods or can be wrapped to do so, we can inject it into ReasoningPathFinder in place of the stub. This follows the principle of dependency inversion: our pathfinder depends on an abstract interface rather than a concrete class, which makes the code flexible and integration-ready. For example, if the real concept memory has an API to fetch linked concepts and a way to compute resonance (perhaps via embedding similarity or stored link weights), we could create a small adapter that implements get_neighbors and get_resonance accordingly and then pass it into ReasoningPathFinder. No changes to the traversal algorithm would be required. By designing the module this way, we ensure that the core reasoning logic is well-tested and reliable before plugging it into the larger system. This separation of concerns allows concurrent development: the reasoning engine can be perfected with the stub, while the integration adapters to real data sources are developed and tested independently. Once both are ready, they can be combined to give Prajna a robust multi-hop reasoning capability.
Implementation: reasoning_engine.py Scaffold
Below is the complete Python implementation of the scaffold. The code is written in a production-ready style with clear class interfaces, docstrings, and inline comments for maintainability. It defines the ConceptNode, ConceptMeshStub, and ReasoningPathFinder classes described above. This module can be imported and used as part of Prajna, and it is straightforward to write unit tests against it by instantiating a ConceptMeshStub, populating it with test data, and verifying that find_path returns the expected results.
python
Copy
Edit
from typing import Union, Optional, Dict, List
import heapq
import math
import random

class ConceptNode:
    """
    Represents a node in the ConceptMeshStub, with an identifier, phase, and links to neighbors.
    """
    def __init__(self, concept_id: Union[str, int], phase: float):
        self.concept_id = concept_id
        self.phase = phase
        # Links to other concepts: neighbor_id -> resonance score
        self.links: Dict[Union[str, int], float] = {}

    def add_link(self, neighbor_id: Union[str, int], resonance: float) -> None:
        """Add a link from this node to a neighbor with a given resonance score."""
        self.links[neighbor_id] = resonance

class ConceptMeshStub:
    """
    A synthetic concept mesh for testing. Manages ConceptNode objects and their connections.
    """
    def __init__(self):
        self.nodes: Dict[Union[str, int], ConceptNode] = {}

    def add_node(self, concept_id: Union[str, int], phase: float) -> None:
        """Add a concept with the given ID and phase value to the mesh."""
        if concept_id in self.nodes:
            raise ValueError(f"Concept '{concept_id}' already exists in the mesh.")
        self.nodes[concept_id] = ConceptNode(concept_id, phase)

    def connect(self, id1: Union[str, int], id2: Union[str, int], resonance: Optional[float] = None) -> None:
        """
        Create a bidirectional link between two concepts in the mesh.
        If resonance is None, a default random strength is assigned for the link.
        """
        if id1 not in self.nodes or id2 not in self.nodes:
            raise ValueError("Both concept IDs must exist in the mesh before connecting them.")
        if resonance is None:
            # Assign a random resonance between 0.5 and 1.0 for testing purposes
            resonance = random.uniform(0.5, 1.0)
        # Add the link in both directions (undirected graph assumption)
        self.nodes[id1].add_link(id2, resonance)
        self.nodes[id2].add_link(id1, resonance)

    def get_node(self, concept_id: Union[str, int]) -> Optional[ConceptNode]:
        """Retrieve the ConceptNode for the given ID (or None if not found)."""
        return self.nodes.get(concept_id)

    def get_neighbors(self, concept_id: Union[str, int]) -> List[Union[str, int]]:
        """Return a list of concept IDs directly connected to the given concept."""
        node = self.get_node(concept_id)
        if node is None:
            return []
        return list(node.links.keys())

    def get_resonance(self, id1: Union[str, int], id2: Union[str, int]) -> Optional[float]:
        """Get the resonance score of the direct link between id1 and id2 (if any)."""
        node = self.get_node(id1)
        if node and id2 in node.links:
            return node.links[id2]
        return None

class ReasoningPathFinder:
    """
    Finds multi-hop reasoning paths through a concept mesh while prioritizing coherence.
    """
    def __init__(self, concept_mesh: Union[ConceptMeshStub, object]):
        """
        Initialize with a concept mesh (stub or real). The mesh object should provide:
          - get_node(concept_id) -> ConceptNode or equivalent (with .phase attribute)
          - get_neighbors(concept_id) -> list of neighbor IDs
          - get_resonance(id1, id2) -> resonance score for a link (or None if no link)
        """
        self.mesh = concept_mesh

    def find_path(self, start_id: Union[str, int], end_id: Union[str, int], max_hops: Optional[int] = None) -> Optional[Dict]:
        """
        Perform a multi-hop traversal from start_id to end_id, aiming for low phase drift and high resonance.
        Parameters:
            start_id: The starting concept ID.
            end_id:   The target concept ID to reach.
            max_hops: Optional limit on the number of hops (edges) to explore.
        Returns:
            A dictionary with keys:
              - 'path': List of concept IDs from start to end (inclusive).
              - 'coherence_score': Float indicating overall alignment (higher is better).
              - 'phase_drift': Total phase deviation across the path.
            Returns None if no path is found.
        """
        # Validate start and end exist
        if self.mesh.get_node(start_id) is None or self.mesh.get_node(end_id) is None:
            return None

        # Priority queue of (total_cost, current_node, hops_so_far)
        pq: List[tuple] = [(0.0, start_id, 0)]
        # Best known cost to reach each node (for Dijkstra-like traversal)
        best_cost: Dict[Union[str, int], float] = {start_id: 0.0}
        # Predecessor map for path reconstruction
        prev: Dict[Union[str, int], Optional[Union[str, int]]] = {start_id: None}

        while pq:
            total_cost, current, hops = heapq.heappop(pq)
            # If we pulled a state that is worse than an already known cost, skip it
            if total_cost > best_cost.get(current, math.inf):
                continue
            # Stop if target reached
            if current == end_id:
                break
            # If hop limit is reached, do not expand further
            if max_hops is not None and hops >= max_hops:
                continue

            for neighbor in self.mesh.get_neighbors(current):
                node_cur = self.mesh.get_node(current)
                node_nei = self.mesh.get_node(neighbor)
                if node_cur is None or node_nei is None:
                    continue  # should not happen if data is consistent
                # Calculate phase difference and resonance
                phase_diff = abs(node_cur.phase - node_nei.phase)
                resonance = self.mesh.get_resonance(current, neighbor) or 1.0
                # Compute cost of moving along this edge
                edge_cost = phase_diff + (1.0 - resonance)
                new_cost = total_cost + edge_cost
                # If this route improves the best cost to the neighbor, update and push to queue
                if new_cost < best_cost.get(neighbor, math.inf):
                    best_cost[neighbor] = new_cost
                    prev[neighbor] = current
                    heapq.heappush(pq, (new_cost, neighbor, hops + 1))

        # If target not reached (no entry in prev or only start exists)
        if end_id not in prev or prev[end_id] is None and start_id != end_id:
            return None

        # Reconstruct the path from end to start using the prev map
        path: List[Union[str, int]] = []
        node: Union[str, int, None] = end_id
        while node is not None:
            path.append(node)
            node = prev.get(node)
        path.reverse()

        # Compute total phase drift and total resonance along the path
        total_phase_drift = 0.0
        total_resonance = 0.0
        for i in range(len(path) - 1):
            a_id = path[i]
            b_id = path[i+1]
            node_a = self.mesh.get_node(a_id)
            node_b = self.mesh.get_node(b_id)
            if node_a is None or node_b is None:
                continue
            total_phase_drift += abs(node_a.phase - node_b.phase)
            total_resonance += self.mesh.get_resonance(a_id, b_id) or 0.0

        coherence_score = total_resonance - total_phase_drift

        return {
            "path": path,
            "coherence_score": coherence_score,
            "phase_drift": total_phase_drift
        }
How it works: With this code, we can easily set up a test scenario. For example, imagine concepts A, B, C, D where A is connected to D by a weak link, but A–B–C–D forms a stronger chain (each step has smaller phase differences and higher resonance). We could do:
python
Copy
Edit
mesh = ConceptMeshStub()
mesh.add_node("A", phase=0.0)
mesh.add_node("B", phase=1.0)
mesh.add_node("C", phase=2.0)
mesh.add_node("D", phase=2.0)
mesh.connect("A", "B", resonance=0.9)
mesh.connect("B", "C", resonance=0.9)
mesh.connect("C", "D", resonance=0.9)
mesh.connect("A", "D", resonance=0.5)  # direct but low resonance
finder = ReasoningPathFinder(mesh)
result = finder.find_path("A", "D")
print(result)
This stub configuration creates two possible paths from A to D: a direct link (A–D) with a relatively large phase jump and low resonance, and a 3-hop path (A–B–C–D) with smoother transitions. The ReasoningPathFinder should choose the latter path. Indeed, in this setup the multi-hop route yields a higher coherence score and lower total drift than the direct connection. The printed result would be something like:
bash
Copy
Edit
{'path': ['A', 'B', 'C', 'D'], 'coherence_score': 0.7, 'phase_drift': 2.0}
indicating that the reasoning chain goes through B and C, achieving a coherence score of 0.7 (in our stub scale) versus a much lower score for the direct edge. This confirms that the engine successfully favors the path with better semantic alignment and link strength.
Conclusion
The provided scaffold meets the requirements for Phase 1: it defines a clear structure for multi-hop reasoning with ConceptNode, ConceptMeshStub, and ReasoningPathFinder classes. The traversal logic explicitly optimizes for low phase drift and high resonance at each hop, producing a path and associated metrics (coherence score and phase drift) that characterize the reasoning quality. Because this module is modular and testable by design, we can validate its behavior thoroughly using synthetic data. As Prajna moves to Phase 2, integrating this module is straightforward – the stub can be replaced by actual data sources (with minimal adapter code) to hook into live concept graphs and memory systems. This scaffold thus provides a solid, production-quality foundation for Prajna’s advanced reasoning capabilities, ensuring that the multi-hop reasoning step can be developed and tested in isolation before being deployed in the full context-building and synthesis pipeline. Sources:
Wang et al., “Each reasoning path can be regarded as a logically coherent walk over the knowledge graph.” (2024)
arxiv.org
Liu et al., “Evaluating the coherence of intermediate reasoning steps ... is essential for improving the model’s step-by-step reasoning over structured graphs.” (2024)
arxiv.org
Luo et al., “We can typically leverage graph search algorithms to identify the shortest paths connecting the topic entity and the target...” (2023)
arxiv.org
ODU CS, “Scaffolding is any code that we write, not as part of the application, but simply to support the process of Unit and Integration testing.”
cs.odu.edu
ODU CS, “A stub is test scaffolding written to replace types and function[s] used by the module under test.”
cs.odu.edu
Boström, “θ_i = semantic phase drift from word reordering or translation... A sentence with stable structural meaning across languages retains C_n.” (2023)
philarchive.org