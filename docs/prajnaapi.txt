"""
Prajna API: Atomic, Non-Discriminatory, Multi-Tenant, Consciousness-Enabled
============================================================================

- Non-discriminatory entropy pipeline: ALL users get ALL pure, diverse concepts
- 3-tier logic: "basic", "research", "enterprise" (role field for analytics/limits/metrics, but NO concept restriction)
- Multi-tenant endpoints preserved (user/org/knowledge)
- Evolution/consciousness endpoints exposed (no discrimination)
"""

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, File, UploadFile, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any, AsyncGenerator
import asyncio
import logging
import os
import shutil
import time
import json
from pathlib import Path

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("prajna_atomic")

# --- Multi-tenant roles and 3-tier configuration ---
TIERS = ["basic", "research", "enterprise"]

def get_user_tier(authorization: Optional[str]) -> str:
    """Parse tier from JWT, header, or fallback to 'basic'."""
    # For demo: parse role from header for easy testing
    # In real setup, decode JWT or use a user management module
    if not authorization:
        return "basic"
    try:
        # Demo: header format "Bearer <tier>:<userid>:<token>"
        if authorization.startswith("Bearer "):
            token = authorization[7:]
        else:
            token = authorization
        if ":" in token:
            role = token.split(":")[0].lower()
            if role in TIERS:
                return role
        return "basic"
    except Exception as e:
        logger.warning(f"Failed to parse tier: {e}")
        return "basic"

# --- Non-Discriminatory Pipeline Import ---
from ingest_pdf.pipeline import ingest_pdf_clean

# --- FastAPI app setup ---
app = FastAPI(
    title="Prajna Atomic API - Non-Discriminatory, Multi-Tenant, Consciousness-Enabled",
    description="Non-discriminatory concept pipeline with 3-tier analytics, multi-tenant endpoints, and experimental consciousness.",
    version="3.0.0"
)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"],
)

TMP_ROOT = r"C:\Users\jason\Desktop\tori\kha\tmp"
os.makedirs(TMP_ROOT, exist_ok=True)

# --- Models ---
class PrajnaRequest(BaseModel):
    user_query: str = Field(..., description="The user's question")
    focus_concept: Optional[str] = None
    conversation_id: Optional[str] = None
    streaming: bool = False
    enable_reasoning: bool = True
    reasoning_mode: Optional[str] = None

class PrajnaResponse(BaseModel):
    answer: str
    sources: List[str]
    audit: Dict[str, Any]
    ghost_overlays: Dict[str, Any]
    context_used: str
    reasoning_triggered: bool
    reasoning_data: Optional[Dict[str, Any]]
    processing_time: float
    trust_score: float
    user_tier: str

class UploadResponse(BaseModel):
    success: bool
    file_path: str
    filename: str
    size_mb: float
    message: str
    extraction_performed: bool
    concept_count: int
    concept_names: List[str]
    extraction_status: str
    user_tier: str

class UserRoleInfo(BaseModel):
    username: str
    role: str

# --- Helper: Get current user role/tier from header ---
async def get_user_role(authorization: Optional[str] = Header(None)) -> str:
    return get_user_tier(authorization)

# --- MAIN ENDPOINTS ---

@app.post("/api/answer", response_model=PrajnaResponse)
async def prajna_answer_endpoint(request: PrajnaRequest, user_tier: str = Depends(get_user_role)):
    """
    Main Prajna endpoint (atomic, non-discriminatory): Returns answer and reasoning, logs user tier for analytics.
    """
    start_time = time.time()
    # For demo: we simulate answer/audit/ghost/context/reasoning
    answer = f"Simulated Prajna answer for: {request.user_query}"
    sources = ["source1", "source2"]
    audit = {"trust_score": 0.87}
    ghost_overlays = {"ghost_score": 0.92}
    context_used = "Simulated context used"
    reasoning_triggered = request.enable_reasoning
    reasoning_data = {"reasoning_path": ["step1", "step2"]}
    processing_time = time.time() - start_time
    trust_score = 0.87

    # --- Non-discriminatory: user_tier is for analytics only, not access control
    logger.info(f"[PRAJNA] Query by {user_tier}: '{request.user_query[:60]}'")

    return PrajnaResponse(
        answer=answer,
        sources=sources,
        audit=audit,
        ghost_overlays=ghost_overlays,
        context_used=context_used,
        reasoning_triggered=reasoning_triggered,
        reasoning_data=reasoning_data,
        processing_time=processing_time,
        trust_score=trust_score,
        user_tier=user_tier
    )

@app.post("/api/upload", response_model=UploadResponse)
async def upload_pdf(file: UploadFile = File(...), user_tier: str = Depends(get_user_role)):
    """
    Atomic admin PDF upload: runs non-discriminatory pipeline, logs user tier, no access difference.
    """
    try:
        start_time = time.time()
        logger.info(f"üì§ [PRAJNA-UPLOAD] User tier: {user_tier}, uploading: {file.filename}")
        os.makedirs(TMP_ROOT, exist_ok=True)
        safe_filename = "".join(c for c in file.filename if c.isalnum() or c in '._-') or f"prajna_upload_{int(time.time())}.pdf"
        timestamp = int(time.time() * 1000)
        unique_filename = f"prajna_{timestamp}_{safe_filename}"
        dest_path = os.path.join(TMP_ROOT, unique_filename)
        with open(dest_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        file_size = os.path.getsize(dest_path)
        file_size_mb = file_size / (1024 * 1024)
        upload_time = time.time() - start_time

        logger.info(f"‚úÖ [PRAJNA-UPLOAD] File saved: {dest_path}, Size: {file_size_mb:.2f} MB")

        # --- Non-discriminatory pipeline: EVERY user gets ALL pure, diverse concepts
        extraction_result = ingest_pdf_clean(dest_path, extraction_threshold=0.0)
        concept_count = extraction_result.get("concept_count", 0)
        concept_names = extraction_result.get("concept_names", [])[:50]
        extraction_status = extraction_result.get("status", "unknown")

        logger.info(f"‚úÖ [PRAJNA-UPLOAD] Extracted {concept_count} pure, diverse concepts (no discrimination!)")

        message = f"Upload & extraction successful! {concept_count} concepts extracted from {safe_filename}"
        total_time = time.time() - start_time

        return UploadResponse(
            success=True,
            file_path=dest_path,
            filename=safe_filename,
            size_mb=round(file_size_mb, 2),
            message=message,
            extraction_performed=True,
            concept_count=concept_count,
            concept_names=concept_names,
            extraction_status=extraction_status,
            user_tier=user_tier
        )

    except Exception as e:
        logger.error(f"‚ùå [PRAJNA-UPLOAD] Failed: {e}")
        raise HTTPException(status_code=500, detail=f"Upload failed: {str(e)}")

@app.get("/api/health")
async def prajna_health_check():
    """Health check (atomic, non-discriminatory)"""
    return {
        "status": "healthy",
        "features": [
            "non_discriminatory_pipeline", "semantic_diversity", "category_balance",
            "multi_tenant", "consciousness_evolution", "three_tier_analytics"
        ]
    }

@app.get("/api/stats")
async def prajna_stats():
    """Stats endpoint (simulate with tier analytics only)"""
    return {
        "uptime": time.time(),
        "users_by_tier": {"basic": 12, "research": 6, "enterprise": 2},
        "total_concepts": 123456
    }

# --- Multi-Tenant Endpoints (preserved as is; add your own user/org logic) ---
@app.get("/api/users/me", response_model=UserRoleInfo)
async def get_my_role(authorization: Optional[str] = Header(None)):
    """Return current user's username and role/tier (for analytics/demos)"""
    # For real use: replace with JWT/session lookup
    username = "demo_user"
    role = get_user_tier(authorization)
    return UserRoleInfo(username=username, role=role)

@app.get("/api/tenant/organizations")
async def get_orgs(user_tier: str = Depends(get_user_role)):
    """Return organizations for current user (simulated, multi-tenant demo)"""
    return {"organizations": [{"name": "LabX", "tier": user_tier}, {"name": "OpenAI", "tier": "enterprise"}]}

# --- Consciousness/Evolution (experimental, non-blocking, non-restrictive) ---
@app.post("/api/consciousness/reason")
async def consciousness_reasoning(request: Dict[str, Any], user_tier: str = Depends(get_user_role)):
    """Simulate consciousness-driven reasoning (no access difference)"""
    logger.info(f"[CONSCIOUSNESS] Tier {user_tier}: {request.get('user_query','')}")
    return {
        "response": f"Conscious answer for '{request.get('user_query','')}'",
        "consciousness_level": 0.7,
        "evolution_triggered": True,
        "user_tier": user_tier
    }

@app.get("/api/consciousness/status")
async def consciousness_status():
    return {"consciousness_level": 0.7, "evolution_cycles": 42}

@app.get("/api/consciousness/metrics")
async def consciousness_metrics():
    return {"recent_performance": [0.8, 0.85, 0.78], "performance_trend": "stable"}

# --- Error handlers ---
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse({"error": "Endpoint not found", "available_endpoints": [
        "/api/answer", "/api/upload", "/api/health", "/api/stats",
        "/api/consciousness/reason", "/api/consciousness/status", "/api/consciousness/metrics"
    ]}, status_code=404)

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    logger.error(f"Internal error: {exc}")
    return JSONResponse({"error": "Internal error", "detail": "Check Prajna logs for details"}, status_code=500)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "prajna.api.prajna_api:app",
        host="0.0.0.0",
        port=8001,
        reload=True,
        log_level="info"
    )
